<?php

require_once(dirname(__FILE__).'/classes/CristyModel.php');

if (!defined('_PS_VERSION_')) {
    exit;
}

class CristyModule extends Module {

	public $tabs = array(
		array(
				'name' => 'Cristy Module', // One name for all langs
				'class_name' => 'AdminCristyModule',
				'visible' => true,
				'parent_class_name' => 'ShopParameters',
	));

    public function __construct() {

		// need_instance. Indicates whether to load the module’s class when displaying the “Modules” page in the back office. If set at 0, the module will not be loaded, and therefore will spend less resources to generate the “Modules” page. If your module needs to display a warning message in the “Modules” page, then you must set this attribute to 1.
		// ps_versions_compliancy. Indicates which version of PrestaShop this module is compatible with. In the example above, we explicitly write that this module will only work with PrestaShop 1.5.x, and no other major version.
		// bootstrap. Indicates that the module’s template files have been built with PrestaShop 1.6’s bootstrap tools in mind – and therefore, that PrestaShop should not try to wrap the template code for the configuration screen (if there is one) with helper tags.

        $this->name = 'cristymodule';
        $this->author = 'CristyBv';
        $this->tab = 'front_office_features';
        $this->version = '1.0';
		$this->need_instance = 0;
		$this->bootstrap = true;

        parent::__construct();

        $this->displayName = $this->trans('Cristy Module', array(), 'Modules.Pagesnotfound.Admin');
		$this->description = $this->trans('Testing...', array(), 'Modules.Pagesnotfound.Admin');
		$this->ps_versions_compliancy = array('min' => '1.7.1.0', 'max' => _PS_VERSION_);
		

		$this->confirmUninstall = $this->l('Are you sure you want to uninstall?');

		if (!Configuration::get('CRISTY_MODULE'))
      		$this->warning = $this->l('No name provided');
	}

	public function installTab($className, $tabName, $tabParentName = false)
	{
		$tab = new Tab();
		$tab->active = 1;
		$tab->class_name = $className;
		$tab->name = array();
		
		foreach (Language::getLanguages(true) as $lang) {
			$tab->name[$lang['id_lang']] = $tabName;
		}
		if ($tabParentName) {
			$tab->id_parent = (int) Tab::getIdFromClassName($tabParentName);
		} else {
			$tab->id_parent = 0;
		}
		$tab->module = $this->name;
		return $tab->add();
	}

	public function uninstallTab($className)
	{
		$idTab = Tab::getIdFromClassName($class_name);

        if ($idTab != 0) {
            $tab = new Tab($idTab);
            $tab->delete();
            return true;
        }
        return false;
	}

    
	public function install()
	{	
		// Check that the Multistore feature is enabled, and if so, set the current context to all shops on this installation of PrestaShop.
		if (Shop::isFeatureActive())
			Shop::setContext(Shop::CONTEXT_ALL);

		// Check that the module parent class is installed.
		// Check that the module can be attached to the leftColumn hook.
		// Check that the module can be attached to the header hook.
		// Create the MYMODULE_NAME configuration setting, setting its value to “my friend”.
		if (!parent::install() ||
			!$this->registerHook('displayLeftColumn') ||
			!$this->registerHook('displayHeader') ||
			!$this->registerHook('displayTop') ||
			!Configuration::updateValue('CRISTY_MODULE', 'my friend')
		)
			return false;			

			//$this->installTab('AdminCristyModule', 'Cristy Module', 'ShopParameters');

		return Db::getInstance()->execute(
			'CREATE TABLE `'._DB_PREFIX_.'cristy_module` (
			id_cristy INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
			body VARCHAR(256) NOT NULL,
			date_add DATETIME NOT NULL,
			PRIMARY KEY(id_cristy),
			INDEX (`date_add`)
		) ENGINE='._MYSQL_ENGINE_.' DEFAULT CHARSET=utf8;'
		);
	}

	public function uninstall()
	{
		if (!parent::uninstall() ||
			!Configuration::deleteByName('CRISTY_MODULE')
		)
			return false;

		//$this->uninstallTab('AdminCristyModuleController');
		return Db::getInstance()->execute('DROP TABLE `'._DB_PREFIX_.'cristy_module`');
	}

	
	public function getContent()
	{
		$output = null;
	
		// Tools::isSubmit() is a PrestaShop-specific method, which checks if the indicated form has been validated.
		// In this case, if the configuration form has not yet been validated, the whole if() block is skipped and PrestaShop will only
		// use the last line, which displays the configuration with the current values, as generated by the displayForm() method.

		if (Tools::isSubmit('submit'.$this->name))
		{

			// Tools:getValue() is a PrestaShop-specific method, which retrieve the content of the POST or GET array in order to get the value of the specified variable.
			
			$my_module_name = strval(Tools::getValue('CRISTY_MODULE'));

			//The Validate object contains many data validation methods, among which is isGenericName(),a method that helps
			// you keep only strings that are valid PrestaShop names – meaning, a string that does not contain special characters, for short.

			if (!$my_module_name
			|| empty($my_module_name)
			|| !Validate::isGenericName($my_module_name))
				$output .= $this->displayError($this->l('Invalid Configuration value'));
			else
			{
				
				$DB_Cristy = new CristyModel();
				$DB_Cristy->body = $my_module_name;				
				$DB_Cristy->add();				
				Configuration::updateValue('CRISTY_MODULE', $my_module_name);
				$output .= $this->displayConfirmation($this->l('Settings updated'));
			}
		}
		return $output.$this->displayForm();
	}

	public function displayForm()
	{
		// Get default language
		$default_lang = (int)Configuration::get('PS_LANG_DEFAULT');
	
		// Init Fields form array
		$fields_form[0]['form'] = array(
			'legend' => array(
				'title' => $this->l('Settings'),
			),
			'input' => array(
				array(
					'type' => 'text',
					'label' => $this->l('Configuration value'),
					'name' => 'CRISTY_MODULE',
					'size' => 20,
					'required' => true
				)
			),
			'submit' => array(
				'title' => $this->l('Save'),
				'class' => 'btn btn-default pull-right'
			)
		);
	
		$helper = new HelperForm();
	
		// Module, token and currentIndex
		$helper->module = $this;
		$helper->name_controller = $this->name;
		$helper->token = Tools::getAdminTokenLite('AdminModules');
		$helper->currentIndex = AdminController::$currentIndex.'&configure='.$this->name;

		// Language
		$helper->default_form_language = $default_lang;
		$helper->allow_employee_form_lang = $default_lang;
	
		// Title and toolbar
		$helper->title = $this->displayName;
		$helper->show_toolbar = true;        // false -> remove toolbar
		$helper->toolbar_scroll = true;      // yes - > Toolbar is always visible on the top of the screen.
		$helper->submit_action = 'submit'.$this->name;
		$helper->toolbar_btn = array(
			'save' =>
			array(
				'desc' => $this->l('Save'),
				'href' => AdminController::$currentIndex.'&configure='.$this->name.'&save'.$this->name.
				'&token='.Tools::getAdminTokenLite('AdminModules'),
			),
			'back' => array(
				'href' => AdminController::$currentIndex.'&token='.Tools::getAdminTokenLite('AdminModules'),
				'desc' => $this->l('Back to list')
			)
		);
	
		// Load current value
		$helper->fields_value['CRISTY_MODULE'] = Configuration::get('CRISTY_MODULE');
	
		return $helper->generateForm($fields_form);
	}

	public function getHookController($hook_name)
	{
		// Include the controller file
		require_once(dirname(__FILE__).'/controllers/hook/'.$hook_name.'.php');
		// Build the controller name dynamically
		$controller_name = $this->name.$hook_name.'Controller';
		// Instantiate controller
		$controller = new $controller_name($this, __FILE__, $this->_path);
		// Return the controller
		return $controller;
	}
	
	public function hookDisplayLeftColumn($params)
	{
		$controller = $this->getHookController('displayLeftColumn');		
		return $controller->run($params);
	}

	public function hookDisplayTop($params)
	{
		$controller = $this->getHookController('displayTop');
		return $controller->run($params);
	}
	
	public function hookDisplayHeader()
	{
		$this->context->controller->addCSS($this->_path.'css/cristymodule.css', 'all');
	}
}
